---
sidebar_position: 2
---

# Context Keys

> Aspect Runtime Context is a summary of the data generated by the consensus process.
> This chapter introduces how to use Context Key to obtain context data, as well as the access rights of each key at each join point.

## Import

<!-- @formatter:off -->
```javascript
import {
    sys,BoolData,BytesData,UintData,IntArrayData,StringArrayData,EthAccessList,EthLogs
} from '@artela/aspect-libs';
    
import {Protobuf} from 'as-proto/assembly';
```
<!-- @formatter:on -->

## 1. BlockHeaderParentHash

* **Key**: `block.header.parentHash`
* **Response Type:** `BytesData`
* **Description:**
    * Get the current block header parent hash.
* **Example:**
    * ```javascript
  const key="block.header.parentHash";
  const parentHashBytes = sys.hostApi.runtimeContext.get(key);
  if (parentHashBytes) {
  const parentHash = Protobuf.decode<BytesData>(parentHashBytes, BytesData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ❌          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 2. BlockHeaderMiner

* **Key**: `block.header.miner`
* **Response Type:** `BytesData`
* **Description:**
    * Get the current block header miner.
* **Example:**
    * ```javascript
  const key="block.header.miner";
  const minerBytes = sys.hostApi.runtimeContext.get(key);
  if (minerBytes) {
  const miner = Protobuf.decode<BytesData> (minerBytes, BytesData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ❌          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 3. BlockHeaderTransactionsRoot

* **Key**: `block.header.transactionsRoot`
* **Response Type:** `BytesData`
* **Description:**
    * Get the current block TransactionsRoot hash.
* **Example:**
    * ```javascript
  const key="block.header.transactionsRoot";
  const transactionsRootBytes = sys.hostApi.runtimeContext.get(key);
  if (transactionsRootBytes) {
  const transactionsRoot = Protobuf.decode<BytesData> (transactionsRootBytes, BytesData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
              |------------------|------------|
       | VerifyTx         | ❌          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 4. BlockHeaderNumber

* **Key**: `block.header.number`
* **Response Type:** `UintData`
* **Description:**
    * Get the current block number.
* **Example:**
    * ```javascript
  const key="block.header.number";
  const numberBytes = sys.hostApi.runtimeContext.get(key);
  if (numberBytes) {
  const number = Protobuf.decode<UintData> (numberBytes, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 5. BlockHeaderTimestamp

* **Key**: `block.header.timestamp`
* **Response Type:** `UintData`
* **Description:**
    * Get the current block header timestamp.
* **Example:**
    * ```javascript
  const key="block.header.timestamp";
  const timestampBytes = sys.hostApi.runtimeContext.get(key);
  if (timestampBytes) {
  const timestamp = Protobuf.decode<UintData> (timestampBytes, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ❌          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 6. EnvExtraEIPs

* **Key**: `env.extraEIPs`
* **Response Type:** `IntArrayData`
* **Description:**
    * Retrieve the EVM module parameters for the '**extra_eips**': defines the additional EIPs for the vm.Config.
* **Example:**
    * ```javascript
  const key="env.extraEIPs";
  const extraEIPsBytes = sys.hostApi.runtimeContext.get(key);
  if (extraEIPsBytes) {
  const extraEIPs = Protobuf.decode<IntArrayData> (extraEIPsBytes, IntArrayData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 7. EnvEnableCreate

* **Key**: `env.enableCreate`
* **Response Type:** `BoolData`
* **Description:**
    * Retrieve the EVM module parameters for the '**enable_create**': toggles states transitions that use the vm.Create
      function.
* **Example:**
    * ```javascript
  const key="env.enableCreate";
  const enableCreateBytes = sys.hostApi.runtimeContext.get(key);
  if (enableCreateBytes) {
  const enableCreate = Protobuf.decode<BoolData>(enableCreateBytes, BoolData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 8. EnvEnableCall

* **Key**: `env.enableCall`
* **Response Type:** `BoolData`
* **Description:**
    * Retrieve the EVM module parameters for the '**enable_call**': toggles states transitions that use the vm.Call
      function
* **Example:**
    * ```javascript
  const key="env.enableCall";
  const enableCall = sys.hostApi.runtimeContext.get(key);
  if (enableCall) {
  const enableCallData = Protobuf.decode<BoolData>(enableCall, BoolData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 9. EnvAllowUnprotectedTxs

* **Key**: `env.allowUnprotectedTxs`
* **Response Type:** `BoolData`
* **Description:**
    * Retrieve the EVM module parameters for the '**allow_unprotected_txs**': defines if replay-protected (i.e non
      EIP155 // signed) transactions can be executed on the states machine.
* **Example:**
    * ```javascript
  const key="env.allowUnprotectedTxs";
  const allowUnprotectedTxs = sys.hostApi.runtimeContext.get(key);
  if (allowUnprotectedTxs) {
  const allowUnprotectedTxsData = Protobuf.decode<BoolData> (allowUnprotectedTxs, BoolData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 10. EnvChainChainId

* **Key**: `env.chain.chainId`
* **Response Type:** `UintData`
* **Description:**
    * Retrieve the Ethereum chain config id.
* **Example:**
    * ```javascript
  const key="env.chain.chainId";
  const chainId = sys.hostApi.runtimeContext.get(key);
  if (chainId) {
  const chainIdData = Protobuf.decode<BoolData> (chainId, BoolData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 11. EnvChainHomesteadBlock

* **Key**: `env.chain.homesteadBlock`
* **Response Type:** `UintData`
* **Description:**
    * Retrieve the Ethereum chain configuration for the '**homestead_block**': switch (nil no fork, 0 = already
      homestead)
* **Example:**
    * ```javascript
  const key="env.chain.homesteadBlock";
  const homesteadBlock = sys.hostApi.runtimeContext.get(key);
  if (homesteadBlock) {
  const homesteadData = Protobuf.decode<UintData> (homesteadBlock, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 12. EnvChainDaoForkBlock

* **Key**: `env.chain.daoForkBlock`
* **Response Type:** `UintData`
* **Description:**
    * Retrieve the Ethereum chain configuration for the '**dao_fork_block**': corresponds to TheDAO hard-fork switch
      block (nil no fork)
* **Example:**
    * ```javascript
  const key="env.chain.daoForkBlock";
  const daoForkBlock = sys.hostApi.runtimeContext.get(key);
  if (daoForkBlock) {
  const daoForkBlockData = Protobuf.decode<UintData> (daoForkBlock, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                      |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 13. EnvChainDaoForkSupport

* **Key**: `env.chain.daoForkSupport`
* **Response Type:** `BoolData`
* **Description:**
    * Retrieve the Ethereum chain configuration for the '**dao_fork_support**': defines whether the nodes supports or
      opposes the DAO hard-fork
* **Example:**
    * ```javascript
  const key="env.chain.daoForkSupport";
  const daoForkSupport = sys.hostApi.runtimeContext.get(key);
  if (daoForkSupport) {
  const daoForkSupportData = Protobuf.decode<BoolData>(daoForkSupport, BoolData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 14. EnvChainEip150Block

* **Key**: `env.chain.eip150Block`
* **Response Type:** `UintData`
* **Description:**
    * Retrieve the Ethereum chain configuration for the '**eip150_block**': EIP150 implements the Gas price
      changes (https://github.com/ethereum/EIPs/issues/150) EIP150 HF block (nil no fork)
* **Example:**
    * ```javascript
  const key="env.chain.eip150Block";
  const eip150Block = sys.hostApi.runtimeContext.get(key);
  if (eip150Block) {
  const eip150BlockData = Protobuf.decode<UintData>(eip150Block, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 15. EnvChainEip155Block

* **Key**: `env.chain.eip155Block`
* **Response Type:** `UintData`
* **Description:**
    * Retrieve the Ethereum chain configuration for the '**eip155_block**'.
* **Example:**
    * ```javascript
  const key="env.chain.eip155Block";
  const eip155Block = sys.hostApi.runtimeContext.get(key);
  if (eip155Block) {
  const eip155BlockData = Protobuf.decode<UintData> (eip155Block, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                      |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 16. EnvChainEip158Block

* **Key**: `env.chain.eip158Block`
* **Response Type:** `UintData`
* **Description:**
    * Retrieve the Ethereum chain configuration for the '**eip158_block**'.
* **Example:**
    * ```javascript
  const key="env.chain.eip158Block";
  const eip158Block = sys.hostApi.runtimeContext.get(key);
  if (eip158Block) {
  const eip158BlockData = Protobuf.decode<UintData> (eip158Block, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                      |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 17. EnvChainByzantiumBlock

* **Key**: `env.chain.byzantiumBlock`
* **Response Type:** `UintData`
* **Description:**
    * Retrieve the Ethereum chain configuration for the '**byzantium_block**': Byzantium switch block (nil no fork, 0 =
      already on byzantium)
* **Example:**
    * ```javascript
  const key="env.chain.byzantiumBlock";
  const byzantiumBlock = sys.hostApi.runtimeContext.get(key);
  if (byzantiumBlock) {
  const byzantiumBlockData = Protobuf.decode<UintData> (byzantiumBlock, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 18. EnvChainConstantinopleBlock

* **Key**: `env.chain.constantinopleBlock`
* **Response Type:** `UintData`
* **Description:**
    * Retrieve the Ethereum chain configuration for the '**constantinople_block**': Constantinople switch block (nil no
      fork, 0 = already activated)
* **Example:**
    * ```javascript
  const key="env.chain.constantinopleBlock";
  const constantinopleBlock = sys.hostApi.runtimeContext.get(key);
  if (constantinopleBlock) {
  const constantinopleBlockData = Protobuf.decode<UintData> (constantinopleBlock, UintData.decode);
  }
    ```
* **Join-Point Access:**
    * | Join-Point       | Can Assess |
            |------------------|------------|
      | VerifyTx         | ✅          |
      | PreTxExecute     | ✅          |
      | PreContractCall  | ✅          |
      | PostContractCall | ✅          |
      | PostTxExecute    | ✅          |
      | Operation        | ✅          |

## 19. EnvChainPetersburgBlock

* **Key**: `env.chain.petersburgBlock`
* **Response Type:** `UintData`
* **Description:**
    * Retrieve the Ethereum chain configuration for the '**petersburg_block**': Petersburg switch block (nil no fork,
      0 = already activated)
* **Example:**
    * ```javascript
  const key="env.chain.petersburgBlock";
  const petersburgBlock = sys.hostApi.runtimeContext.get(key);
  if (petersburgBlock) {
  const petersburgBlockData = Protobuf.decode<UintData> (petersburgBlock, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 20. EnvChainIstanbulBlock

* **Key**: `env.chain.istanbulBlock`
* **Response Type:** `UintData`
* **Description:**
    * Retrieve the Ethereum chain configuration for the '**istanbul_block**': Istanbul switch block (nil no fork, 0 =
      already on istanbul)
* **Example:**
    * ```javascript
  const key="env.chain.istanbulBlock";
  const istanbulBlock = sys.hostApi.runtimeContext.get(key);
  if (istanbulBlock) {
  const istanbulBlockData = Protobuf.decode<UintData> (istanbulBlock, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 21. EnvChainMuirGlacierBlock

* **Key**: `env.chain.muirGlacierBlock`
* **Response Type:** `UintData`
* **Description:**
    * Retrieve the Ethereum chain configuration for the '**muir_glacier_block**': Eip-2384 (bomb delay) switch block (
      nil no fork, 0 = already activated).
* **Example:**
    * ```javascript
  const key="env.chain.muirGlacierBlock";
  const muirGlacierBlock = sys.hostApi.runtimeContext.get(key);
  if (muirGlacierBlock) {
  const muirGlacierBlockData = Protobuf.decode<UintData> (muirGlacierBlock, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 22. EnvChainBerlinBlock

* **Key**: `env.chain.berlinBlock`
* **Response Type:** `UintData`
* **Description:**
    * Retrieve the Ethereum chain configuration for the '**berlin_block**': Berlin switch block (nil = no fork, 0 =
      already on berlin)
* **Example:**
    * ```javascript
  const key="env.chain.berlinBlock";
  const berlinBlock = sys.hostApi.runtimeContext.get(key);
  if (berlinBlock) {
  const berlinBlockData = Protobuf.decode<UintData> (berlinBlock, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 23. EnvChainLondonBlock

* **Key**: `env.chain.londonBlock`
* **Response Type:** `UintData`
* **Description:**
    * Retrieve the Ethereum chain configuration for the '**london_block**': London switch block (nil = no fork, 0 =
      already on london)
* **Example:**
    * ```javascript
  const key="env.chain.londonBlock";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<UintData> (bytesData, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 24. EnvChainArrowGlacierBlock

* **Key**: `env.chain.arrowGlacierBlock`
* **Response Type:** `UintData`
* **Description:**
    * Retrieve the Ethereum chain configuration for the '**arrow_glacier_block**': Eip-4345 (bomb delay) switch block (
      nil = no fork, 0 = already activated)
* **Example:**
    * ```javascript
  const key="env.chain.arrowGlacierBlock";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<UintData> (bytesData, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                      |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 25. EnvChainGrayGlacierBlock

* **Key**: `env.chain.grayGlacierBlock`
* **Response Type:** `UintData`
* **Description:**
    * Retrieve the Ethereum chain configuration for the '**gray_glacier_block**': EIP-5133 (bomb delay) switch block (
      nil = no fork, 0 = already activated)
* **Example:**
    * ```javascript
  const key="env.chain.grayGlacierBlock";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<UintData> (bytesData, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 26. EnvChainMergeNetSplitBlock

* **Key**: `env.chain.mergeNetSplitBlock`
* **Response Type:** `UintData`
* **Description:**
    * Retrieve the Ethereum chain configuration for the '**merge_netsplit_block**': Virtual fork after The Merge to use
      as a network splitter.
* **Example:**
    * ```javascript
  const key="env.chain.mergeNetSplitBlock";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<UintData> (bytesData, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 27. EnvChainShanghaiTime

* **Key**: `env.chain.shanghaiTime`
* **Response Type:** `UintData`
* **Description:**
    * Retrieve the Ethereum chain configuration for the '**shanghaiTime**': Shanghai switch time (nil = no fork, 0 =
      already on shanghai).
* **Example:**
    * ```javascript
  const key="env.chain.shanghaiTime";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<UintData> (bytesData, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 28. EnvChainCancunTime

* **Key**: `env.chain.cancunTime`
* **Response Type:** `UintData`
* **Description:**
    * Retrieve the Ethereum chain configuration for the '**CancunTime**': Cancun switch time (nil = no fork, 0 = already
      on cancun).
* **Example:**
    * ```javascript
  const key="env.chain.cancunTime";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<UintData> (bytesData, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 29. EnvChainPragueTime

* **Key**: `env.chain.pragueTime`
* **Response Type:** `UintData`
* **Description:**
    * Retrieve the Ethereum chain configuration for the '**PragueTime**': Prague switch time (nil = no fork, 0 = already
      on prague).
* **Example:**
    * ```javascript
  const key="env.chain.pragueTime";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<UintData> (bytesData, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 30. EnvConsensusParamsBlockMaxGas

* **Key**: `env.consensusParams.block.maxGas`
* **Response Type:** `IntData`
* **Description:**
    * Retrieve the max gas per block.
* **Example:**
    * ```javascript
  const key="env.consensusParams.block.maxGas";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<IntData> (bytesData, IntData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 31. EnvConsensusParamsBlockMaxBytes

* **Key**: `env.consensusParams.block.maxBytes`
* **Response Type:** `IntData`
* **Description:**
    * Retrieve the max block size, in bytes.
* **Example:**
    * ```javascript
  const key="env.consensusParams.block.maxBytes";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<IntData> (bytesData, IntData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 32. EnvConsensusParamsEvidenceMaxAgeDuration

* **Key**: `env.consensusParams.evidence.maxAgeDuration`
* **Response Type:** `IntData`
* **Description:**
    * Retrieve the max age duration.It should correspond with an app's "unbonding period" or other similar mechanism for
      handling.
* **Example:**
    * ```javascript
  const key="env.consensusParams.evidence.maxAgeDuration";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<IntData> (bytesData, IntData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 33. EnvConsensusParamsEvidenceMaxAgeNumBlocks

* **Key**: `env.consensusParams.evidence.maxAgeNumBlocks`
* **Response Type:** `IntData`
* **Description:**
    * The basic formula for calculating this is: MaxAgeDuration / {average block time}.
* **Example:**
    * ```javascript
  const key="env.consensusParams.evidence.maxAgeNumBlocks";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<IntData> (bytesData, IntData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 34. EnvConsensusParamsEvidenceMaxBytes

* **Key**: `env.consensusParams.evidence.maxBytes`
* **Response Type:** `IntData`
* **Description:**
    * Retrieve the maximum size of total evidence in bytes that can be committed in a single block.
* **Example:**
    * ```javascript
  const key="env.consensusParams.evidence.maxBytes";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<IntData> (bytesData, IntData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 35. EnvConsensusParamsValidatorPubKeyTypes

* **Key**: `env.consensusParams.validator.pubKeyTypes`
* **Response Type:** `StringArrayData`
* **Description:**
    * Restrict the public key types validators can use.
* **Example:**
    * ```javascript
  const key="env.consensusParams.validator.pubKeyTypes";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<StringArrayData> (bytesData, StringArrayData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 36. EnvConsensusParamsAppVersion

* **Key**: `env.consensusParams.appVersion`
* **Response Type:** `UintData`
* **Description:**
    * Get the ABCI application version.
* **Example:**
    * ```javascript
  const key="env.consensusParams.appVersion";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<UintData> (bytesData, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 37. TxType

* **Key**: `tx.type`
* **Response Type:** `UintData`
* **Description:**
    * Returns the transaction type id. LegacyTxType=0x00 AccessListTxType=0x01 DynamicFeeTxType=0x02 BlobTxType=0x03
* **Example:**
    * ```javascript
  const key="tx.type";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<UintData> (bytesData, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 38. TxChainId

* **Key**: `tx.chainId`
* **Response Type:** `BytesData`
* **Description:**
    * Returns the EIP155 chain ID of the transaction. The return value will always be non-nil. For legacy transactions
      which are not replay-protected, the return value is zero.
* **Example:**
    * ```javascript
  const key="tx.chainId";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<BytesData> (bytesData, BytesData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 39. TxAccessList

* **Key**: `tx.accessList`
* **Response Type:** `EthAccessList`
* **Description:**
    * AccessListTx is the data of EIP-2930 access list transactions.
* **Example:**
    * ```javascript
  const key="tx.accessList";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<EthAccessList> (bytesData, EthAccessList.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |
    *

## 40. TxNonce

* **Key**: `tx.nonce`
* **Response Type:** `UintData`
* **Description:**
    * Returns the sender account nonce of the transaction.
* **Example:**
    * ```javascript
  const key="tx.nonce";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<UintData> (bytesData, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 41. TxGasPrice

* **Key**: `tx.gasPrice`
* **Response Type:** `BytesData`
* **Description:**
    * Returns the gas price of the transaction.
* **Example:**
    * ```javascript
  const key="tx.gasPrice";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<BytesData> (bytesData, BytesData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 42. TxGas

* **Key**: `tx.gas`
* **Response Type:** `UintData`
* **Description:**
    * Returns the gas limit of the transaction.
* **Example:**
    * ```javascript
  const key="tx.gas";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<UintData> (bytesData, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 43. TxGasTipCap

* **Key**: `tx.gasTipCap`
* **Response Type:** `BytesData`
* **Description:**
    * Returns the gasTipCap per gas of the transaction.
* **Example:**
    * ```javascript
  const key="tx.gasTipCap";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<BytesData> (bytesData, BytesData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 44. TxGasFeeCap

* **Key**: `tx.gasFeeCap`
* **Response Type:** `BytesData`
* **Description:**
    * Returns the fee cap per gas of the transaction.
* **Example:**
    * ```javascript
  const key="tx.gasFeeCap";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<BytesData> (bytesData, BytesData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 45. TxTo

* **Key**: `tx.to`
* **Response Type:** `BytesData`
* **Description:**
    * Returns the recipient address of the transaction. For contract-creation transactions, To returns nil.
* **Example:**
    * ```javascript
  const key="tx.to";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<BytesData> (bytesData, BytesData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 46. TxValue

* **Key**: `tx.value`
* **Response Type:** `BytesData`
* **Description:**
    * Returns the ether amount of the transaction.
* **Example:**
    * ```javascript
  const key="tx.value";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<BytesData> (bytesData, BytesData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 47. TxData

* **Key**: `tx.data`
* **Response Type:** `BytesData`
* **Description:**
    * Returns the input data of the transaction.
* **Example:**
    * ```javascript
  const key="tx.data";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<BytesData> (bytesData, BytesData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 48. TxBytes

* **Key**: `tx.bytes`
* **Response Type:** `BytesData`
* **Description:**
    * Returns the transaction marshal binary.
* **Example:**
    * ```javascript
  const key="tx.bytes";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<BytesData> (bytesData, BytesData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 49. TxHash

* **Key**: `tx.hash`
* **Response Type:** `BytesData`
* **Description:**
    * Returns the transaction hash.
* **Example:**
    * ```javascript
  const key="tx.hash";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<BytesData> (bytesData, BytesData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 50. TxUnsignedBytes

* **Key**: `tx.unsigned.bytes`
* **Response Type:** `BytesData`
* **Description:**
    * Returns the unsigned transaction marshal binary.
* **Example:**
    * ```javascript
  const key="tx.unsigned.bytes";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<BytesData> (bytesData, BytesData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 51. TxUnsignedHash

* **Key**: `tx.unsigned.hash`
* **Response Type:** `BytesData`
* **Description:**
    * Returns the unsigned transaction hash.
* **Example:**
    * ```javascript
  const key="tx.unsigned.hash";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<BytesData> (bytesData, BytesData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 52. TxSigV

* **Key**: `tx.sig.v`
* **Response Type:** `BytesData`
* **Description:**
    * Returns the V signature values of the transaction.
* **Example:**
    * ```javascript
  const key="tx.sig.v";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<BytesData> (bytesData, BytesData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ❌          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 53. TxSigR

* **Key**: `tx.sig.r`
* **Response Type:** `BytesData`
* **Description:**
    * Returns the R signature values of the transaction.
* **Example:**
    * ```javascript
  const key="tx.sig.r";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<BytesData> (bytesData, BytesData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ❌          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 54. TxSigS

* **Key**: `tx.sig.s`
* **Response Type:** `BytesData`
* **Description:**
    * Returns the S signature values of the transaction.
* **Example:**
    * ```javascript
  const key="tx.sig.s";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<BytesData> (bytesData, BytesData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ❌          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 55. TxFrom

* **Key**: `tx.from`
* **Response Type:** `BytesData`
* **Description:**
    * Returns the from address of the transaction.
* **Example:**
    * ```javascript
  const key="tx.from";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<BytesData> (bytesData, BytesData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ❌          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 56. TxIndex

* **Key**: `tx.index`
* **Response Type:** `UintData`
* **Description:**
    * Returns the transaction index of current block.
* **Example:**
    * ```javascript
  const key="tx.index";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<UintData> (bytesData, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ❌          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 57. AspectId

* **Key**: `aspect.id`
* **Response Type:** `BytesData`
* **Description:**
    * Returns current aspect id.
* **Example:**
    * ```javascript
  const key="aspect.id";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<BytesData> (bytesData, BytesData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 58. AspectVersion

* **Key**: `aspect.version`
* **Response Type:** `UintData`
* **Description:**
    * Returns current aspect version.
* **Example:**
    * ```javascript
  const key="aspect.version";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<UintData> (bytesData, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |

## 59. MsgFrom

* **Key**: `msg.from`
* **Response Type:** `BytesData`
* **Description:**
    * Returns the sender address of the EVM call message.
* **Example:**
    * ```javascript
  const key="msg.from";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<BytesData> (bytesData, BytesData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ❌          |
       | PreTxExecute     | ❌          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ❌          |

## 60. MsgTo

* **Key**: `msg.to`
* **Response Type:** `BytesData`
* **Description:**
    * Returns the recipient address of the EVM call message.
* **Example:**
    * ```javascript
  const key="msg.to";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<BytesData> (bytesData, BytesData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ❌          |
       | PreTxExecute     | ❌          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ❌          |
       | Operation        | ❌          |

## 61. MsgValue

* **Key**: `msg.value`
* **Response Type:** `BytesData`
* **Description:**
    * Returns the ether amount of the EVM call message.
* **Example:**
    * ```javascript
  const key="msg.value";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<BytesData> (bytesData, BytesData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ❌          |
       | PreTxExecute     | ❌          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ❌          |
       | Operation        | ❌          |

## 62. MsgGas

* **Key**: `msg.gas`
* **Response Type:** `UintData`
* **Description:**
    * Returns the gas limit of the EVM call message.
* **Example:**
    * ```javascript
  const key="msg.gas";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<UintData> (bytesData, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ❌          |
       | PreTxExecute     | ❌          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ❌          |
       | Operation        | ❌          |

## 63. MsgInput

* **Key**: `msg.input`
* **Response Type:** `BytesData`
* **Description:**
    * Returns the input data of the EVM call message.
* **Example:**
    * ```javascript
  const key="isCall";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<BoolData> (bytesData, BoolData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ❌          |
       | PreTxExecute     | ❌          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ❌          |
       | Operation        | ❌          |

## 64. MsgIndex

* **Key**: `msg.index`
* **Response Type:** `UintData`
* **Description:**
    * Returns the index of the EVM call message.
* **Example:**
    * ```javascript
  const key="msg.index";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<UintData> (bytesData, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ❌          |
       | PreTxExecute     | ❌          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ❌          |
       | Operation        | ❌          |

## 65. MsgResultRet

* **Key**: `msg.result.ret`
* **Response Type:** `BytesData`
* **Description:**
    * Returns the result of the EVM call.
* **Example:**
    * ```javascript
  const key="msg.result.ret";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<BytesData> (bytesData, BytesData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ❌          |
       | PreTxExecute     | ❌          |
       | PreContractCall  | ❌          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ❌          |
       | Operation        | ❌          |

## 66. MsgResultGasUsed

* **Key**: `msg.result.gasUsed`
* **Response Type:** `UintData`
* **Description:**
    * Returns the gas used of the EVM call.
* **Example:**
    * ```javascript
  const key="msg.result.gasUsed";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<UintData> (bytesData, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ❌          |
       | PreTxExecute     | ❌          |
       | PreContractCall  | ❌          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ❌          |
       | Operation        | ❌          |

## 67. MsgResultError

* **Key**: `msg.result.error`
* **Response Type:** `StringData`
* **Description:**
    * Returns the result error message of the EVM call.
* **Example:**
    * ```javascript
  const key="msg.result.error";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<StringData>(bytesData, StringData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ❌          |
       | PreTxExecute     | ❌          |
       | PreContractCall  | ❌          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ❌          |
       | Operation        | ❌          |

## 68. ReceiptStatus

* **Key**: `receipt.status`
* **Response Type:** `UintData`
* **Description:**
    * Returns the receipt status of the EVM call.
* **Example:**
    * ```javascript
  const key="receipt.status";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<UintData> (bytesData, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ❌          |
       | PreTxExecute     | ❌          |
       | PreContractCall  | ❌          |
       | PostContractCall | ❌          |
       | PostTxExecute    | ✅          |
       | Operation        | ❌          |

## 69. ReceiptLogs

* **Key**: `receipt.logs`
* **Response Type:** `EthLogs`

* **Description:**
    * Returns the receipt logs of the EVM call.
* **Example:**
    * ```javascript
  const key="receipt.logs";
  const bytesData = sys.hostApi.runtimeContext.get(key);
  if (bytesData) {
  const resultObject = Protobuf.decode<EthLogs> (bytesData, EthLogs.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ❌          |
       | PreTxExecute     | ❌          |
       | PreContractCall  | ❌          |
       | PostContractCall | ❌          |
       | PostTxExecute    | ✅          |
       | Operation        | ❌          |

## 70. ReceiptGasUsed

* **Key**: `receipt.gasUsed`
* **Response Type:** `UintData`
* **Description:**
    * Returns the receipt gas used of the EVM call.
* **Example:**
    * ```javascript
  const key="receipt.gasUsed";
  const gasUsed = sys.hostApi.runtimeContext.get(key);
  if (gasUsed) {
  const gasUsedData = Protobuf.decode<UintData> (gasUsed, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ❌          |
       | PreTxExecute     | ❌          |
       | PreContractCall  | ❌          |
       | PostContractCall | ❌          |
       | PostTxExecute    | ✅          |
       | Operation        | ❌          |

## 71. ReceiptCumulativeGasUsed

* **Key**: `receipt.cumulativeGasUsed`
* **Response Type:** `UintData`
* **Description:**
    * Returns the cumulative gas used of the receipt.
* **Example:**
    * ```javascript
  const key="receipt.cumulativeGasUsed";
  const cumulativeGasUsed = sys.hostApi.runtimeContext.get(key);
  if (cumulativeGasUsed) {
  constcumulativeGasUsedData = Protobuf.decode<UintData> (cumulativeGasUsed, UintData.decode);
  }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ❌          |
       | PreTxExecute     | ❌          |
       | PreContractCall  | ❌          |
       | PostContractCall | ❌          |
       | PostTxExecute    | ✅          |
       | Operation        | ❌          |

## 72. ReceiptBloom

* **Key**: `receipt.bloom`
* **Response Type:** `BytesData`
* **Description:**
    * Returns the receipt bloom.
* **Example:**
    * ```
  const key="receipt.bloom";
  const bloom = sys.hostApi.runtimeContext.get(key);
  if (bloom) {
  const bloomData = Protobuf.decode<BytesData> (bloom, BytesData.decode);
  }
    ```
* **Join-Point Access:**
    * | Join-Point       | Can Assess |
                |------------------|------------|       
      | VerifyTx         | ❌          |
      | PreTxExecute     | ❌          |
      | PreContractCall  | ❌          |
      | PostContractCall | ❌          |
      | PostTxExecute    | ✅          |
      | Operation        | ❌          |

## 73. IsCall

* **Key:**  `isCall`
* **Response type:** <a href="/api/docs/classes/proto.BoolData.html" target="_blank">BoolData</a>
* **Description:**
    * The current transaction is **Call** or **Send**. If it is **Call**, return true.
* **Example:**
    * ```javascript
      const key="isCall";
      const bytesData = sys.hostApi.runtimeContext.get(key);
      if (bytesData) {
          const  resultObject = Protobuf.decode<BoolData> (bytesData, BoolData.decode);
      }
    ```
* **Join-Point Access:**
    *  | Join-Point       | Can Assess |
                     |------------------|------------|
       | VerifyTx         | ✅          |
       | PreTxExecute     | ✅          |
       | PreContractCall  | ✅          |
       | PostContractCall | ✅          |
       | PostTxExecute    | ✅          |
       | Operation        | ✅          |
